/**
 * @file MapView.tsx
 * @description Map component that displays search location and locksmith markers
 * Represents both current locations and HQ locations for tradespeople
 */

import React, { useEffect, useState, useRef } from 'react'
import Map, { Marker, MapRef } from 'react-map-gl'
// We need mapboxgl types but don't use the import directly
// @ts-ignore - used for types
import type mapboxgl from 'mapbox-gl'
import 'mapbox-gl/dist/mapbox-gl.css'
import { AlertCircle, MapPin } from 'lucide-react'
import type { Locksmith } from '../../types/locksmith'
import VanIcon3D from './SimplifiedVanIcon3D'
import ShopIcon3D from './SimplifiedShopIcon3D'
import { getPostcodeCoordinates } from '../../utils/postcodeGeocoder'

// Helper function to calculate bearing between two coordinates
const calculateBearing = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
  // Convert to radians
  const startLat = lat1 * Math.PI / 180;
  const startLng = lon1 * Math.PI / 180;
  const destLat = lat2 * Math.PI / 180;
  const destLng = lon2 * Math.PI / 180;

  // Calculate bearing
  const y = Math.sin(destLng - startLng) * Math.cos(destLat);
  const x = Math.cos(startLat) * Math.sin(destLat) -
            Math.sin(startLat) * Math.cos(destLat) * Math.cos(destLng - startLng);
  let bearing = Math.atan2(y, x) * 180 / Math.PI;
  bearing = (bearing + 360) % 360; // Normalize to 0-360
  
  return bearing;
};

// Define type for road-snapped points that include bearing
type SnappedPoint = {
  latitude: number;
  longitude: number;
  bearing?: number;
};

// Define type for tradesperson markers with visibility info
type TradesPersonMarker = {
  id: string;
  latitude: number;
  longitude: number;
  bearing: number;
  companyName: string;
  visible: boolean; // Whether this marker should be visible or hidden due to overlap
  isVan: boolean; // Whether this is a van (true) or HQ (false)
  priority: number; // Priority for display (higher = more likely to be shown)
};

// Store previous locations for each tradesperson
const previousLocations: Record<string, {latitude: number, longitude: number}> = {};

/**
 * Props for the MapView component
 */
interface MapViewProps {
  /** Reference to the map instance for programmatic control */
  mapRef: React.RefObject<MapRef>
  /** Current map viewport (center coordinates and zoom level) */
  viewport: {
    latitude: number
    longitude: number
    zoom: number
  }
  /** Callback for map movement events */
  onMove: (evt: any) => void
  /** Whether a search has been performed */
  hasSearched: boolean
  /** Coordinates of the searched location (postcode) */
  searchLocation: { latitude: number; longitude: number } | null
  /** List of locksmith/tradesperson results within the search radius */
  availableLocksmiths: Locksmith[]
  /** Currently selected locksmith */
  selectedLocksmith?: Locksmith | null
  /** Callback when a locksmith marker is clicked */
  onMarkerClick: (locksmith: Locksmith) => void
}

/**
 * Map component that displays:
 * 1. The base street map using Mapbox
 * 2. A pin for the searched postcode location
 * 3. Numbered circular markers for primary locksmith locations
 * 4. Navigation icons for current locations (when different from primary)
 * 5. Home icons for HQ locations (when different from current location)
 *
 * @param props - Component props (see MapViewProps interface)
 * @returns React component
 */
export default function MapView({
  mapRef,
  viewport,
  onMove,
  hasSearched,
  searchLocation,
  availableLocksmiths,
  onMarkerClick
}: MapViewProps) {
  const [error, setError] = useState<string | null>(null)
  const mapboxToken = import.meta.env.VITE_MAPBOX_ACCESS_TOKEN
  
  // State to store road-snapped coordinates
  const [roadSnappedPoints, setRoadSnappedPoints] = useState<Record<string, SnappedPoint>>({});
  
  // State to store visible markers (to prevent overlapping)
  const [visibleMarkers, setVisibleMarkers] = useState<Record<string, boolean>>({});
  
  // Reference to the map instance
  const mapInstanceRef = useRef<mapboxgl.Map | null>(null);
  
  // Store the map instance when it loads
  const storeMapInstance = () => {
    if (mapRef.current) {
      mapInstanceRef.current = mapRef.current.getMap();
    }
  };

  // Effect to handle road-snapping when the map is loaded and locksmiths change
  useEffect(() => {
    const snapToRoads = () => {
      if (!mapboxToken || !mapInstanceRef.current || !mapInstanceRef.current.loaded()) {
        // If map isn't loaded yet, try again in a moment
        setTimeout(snapToRoads, 500);
        return;
      }
      
      const map = mapInstanceRef.current;
      
      // Process each locksmith with a current location
      availableLocksmiths.forEach(locksmith => {
        const currentLocation = locksmith.locations.find(loc => loc.isCurrentLocation);
        if (!currentLocation) return;
        
        const id = `${locksmith.id}-current`;
        const point = [currentLocation.longitude, currentLocation.latitude];
        
        // Use the map's queryRenderedFeatures to find nearby roads
        try {
          // Convert the geographic coordinates to pixel coordinates
          const pixelPoint = map.project(point as mapboxgl.LngLatLike);
          
          // Query for road features near this point (expand search area)
          // Use a larger search area to ensure we find roads
          const searchRadius = 100; // pixels
          const roadFeatures = map.queryRenderedFeatures(
            [[pixelPoint.x - searchRadius, pixelPoint.y - searchRadius], 
             [pixelPoint.x + searchRadius, pixelPoint.y + searchRadius]],
            { 
              // No layer filter - just get all features and filter them ourselves
            }
          );
          
          // Filter to only include features that are likely roads
          const roadLikeFeatures = roadFeatures.filter(feature => {
            // Check if it's a line
            if (feature.geometry.type !== 'LineString') return false;
            
            // Check various properties that might indicate it's a road
            const props = feature.properties || {};
            
            // Different styles use different property names
            const isRoad = (
              // Common road classes
              props.class === 'street' ||
              props.class === 'road' ||
              props.class === 'motorway' ||
              props.class === 'primary' ||
              props.class === 'secondary' ||
              props.class === 'tertiary' ||
              props.class === 'trunk' ||
              // Check for road in the layer id
              (feature.layer && feature.layer.id && 
               (feature.layer.id.includes('road') || 
                feature.layer.id.includes('street') ||
                feature.layer.id.includes('transportation')))
            );
            
            return isRoad;
          });
          
          // console.log(`Found ${roadLikeFeatures.length} road features near ${locksmith.companyName}`);
          
          // If we found road features, snap to the closest one
          if (roadLikeFeatures.length > 0) {
            // Find the closest road feature by calculating distance to each one
            let closestRoad = roadLikeFeatures[0];
            let minRoadDistance = Infinity;
            
            // Find the road closest to our point
            for (const roadFeature of roadLikeFeatures) {
              if (roadFeature.geometry.type !== 'LineString') continue;
              
              // Get the center point of the road feature as a simple approximation
              const coords = roadFeature.geometry.coordinates as [number, number][];
              if (coords.length === 0) continue;
              
              // Calculate distance to the first point as a simple check
              const firstCoord = coords[0];
              const distance = Math.sqrt(
                Math.pow(point[0] - firstCoord[0], 2) + 
                Math.pow(point[1] - firstCoord[1], 2)
              );
              
              if (distance < minRoadDistance) {
                minRoadDistance = distance;
                closestRoad = roadFeature;
              }
            }
            
            // console.log('Closest road:', closestRoad);
            
            // If it's a line, find the closest point on that line
            if (closestRoad.geometry.type === 'LineString') {
              const roadCoords = closestRoad.geometry.coordinates as [number, number][];
              
              // Find the closest point on the road and calculate road direction
              let minDistance = Infinity;
              let closestPoint: [number, number] = point as [number, number];
              let roadBearing = 90; // Default east
              
              // We need at least two points to calculate direction
              if (roadCoords.length >= 2) {
                for (let i = 0; i < roadCoords.length - 1; i++) {
                  // Calculate distance to this road segment
                  const segStart = roadCoords[i];
                  const segEnd = roadCoords[i + 1];
                  
                  const distance = Math.sqrt(
                    Math.pow(point[0] - segStart[0], 2) + 
                    Math.pow(point[1] - segStart[1], 2)
                  );
                  
                  if (distance < minDistance) {
                    minDistance = distance;
                    closestPoint = segStart;
                    
                    // Calculate bearing along this road segment
                    // Convert to lat/lng for bearing calculation
                    const startPoint = mapRef.current?.unproject(segStart);
                    const endPoint = mapRef.current?.unproject(segEnd);
                    
                    if (startPoint && endPoint) {
                      roadBearing = calculateBearing(
                        startPoint.lat,
                        startPoint.lng,
                        endPoint.lat,
                        endPoint.lng
                      );
                    }
                  }
                }
              } else {
                // Fall back to simple closest point if we don't have segments
                for (const coord of roadCoords) {
                  const distance = Math.sqrt(
                    Math.pow(point[0] - coord[0], 2) + 
                    Math.pow(point[1] - coord[1], 2)
                  );
                  
                  if (distance < minDistance) {
                    minDistance = distance;
                    closestPoint = coord;
                  }
                }
              }
              
              // Only snap if the point is reasonably close to a road
              // This prevents snapping to roads that are too far away
              const maxSnapDistance = 0.0005; // roughly 50 meters in decimal degrees
              if (minDistance < maxSnapDistance) {
                // Store the snapped point and road bearing
                setRoadSnappedPoints(prev => ({
                  ...prev,
                  [id]: {
                    longitude: closestPoint[0],
                    latitude: closestPoint[1],
                    bearing: roadBearing
                  }
                }));
                
                // console.log(`Snapped ${locksmith.companyName} to road:`, {
                  original: point,
                  snapped: closestPoint,
                  distance: minDistance
                });
              } else {
                // console.log(`Road too far away for ${locksmith.companyName}, not snapping`);
              }
            }
          } else {
            // console.log(`No roads found near ${locksmith.companyName}'s location`);
          }
        } catch (err) {
          console.error('Error snapping to road:', err);
        }
      });
    };
    
    // Start the snapping process
    snapToRoads();
    
  }, [mapboxToken, availableLocksmiths, viewport]);
  
  // Calculate which markers should be visible based on current zoom level and proximity
  useEffect(() => {
    // Skip if no locksmiths or map not ready
    if (!availableLocksmiths.length || !mapRef.current) return;
    
    try {
      // Prepare markers data
      const markers: TradesPersonMarker[] = [];
      
      // Collect all potential markers (both vans and HQ locations)
      availableLocksmiths.forEach(locksmith => {
        // Add van marker if tradesperson has current location
        const currentLocation = locksmith.locations.find(loc => loc.isCurrentLocation);
        if (currentLocation) {
          // Get coordinates (use road-snapped if available)
          const snappedPoint = roadSnappedPoints[`${locksmith.id}-current`];
          const latitude = snappedPoint?.latitude || currentLocation.latitude;
          const longitude = snappedPoint?.longitude || currentLocation.longitude;
          
          // Get bearing (use road bearing if available, otherwise company name hash)
          let bearing = 90; // Default
          if (snappedPoint && typeof snappedPoint.bearing === 'number') {
            bearing = snappedPoint.bearing;
          } else {
            // Fallback: hash company name for consistent bearing
            const companyNameHash = locksmith.companyName.split('').reduce(
              (acc, char) => acc + char.charCodeAt(0), 0
            );
            bearing = companyNameHash % 360;
          }
          
          markers.push({
            id: `${locksmith.id}-van`,
            latitude,
            longitude,
            bearing,
            companyName: locksmith.companyName,
            visible: true, // Start with all visible
            isVan: true,
            priority: 100 // Vans have higher priority than HQ
          });
        }
        
        // Add HQ marker (HQ is any location that is not a current location)
        const hqLocation = locksmith.locations.find(loc => !loc.isCurrentLocation);
        if (hqLocation) {
          // Only add HQ if there's no current location at the same position
          // This prevents HQ and van from being at the same location
          const shouldAddHQ = !currentLocation || 
            Math.abs(hqLocation.latitude - currentLocation.latitude) > 0.0001 || 
            Math.abs(hqLocation.longitude - currentLocation.longitude) > 0.0001;
            
          if (shouldAddHQ) {
            markers.push({
              id: `${locksmith.id}-hq`,
              latitude: hqLocation.latitude,
              longitude: hqLocation.longitude,
              bearing: 0, // HQ doesn't need bearing
              companyName: locksmith.companyName,
              visible: true, // Start with all visible
              isVan: false,
              priority: 50 // HQ has lower priority than vans
            });
          } else {
            // console.log(`Skipping HQ for ${locksmith.companyName} as it's at the same location as the van`);
          }
        }
      });
      
      // Calculate which markers should be hidden due to overlap
      const visibilityMap: Record<string, boolean> = {};
      
      // First, initialize all markers as visible
      markers.forEach(marker => {
        visibilityMap[marker.id] = true;
      });
      
      // Calculate pixel distance threshold based on zoom
      // At lower zoom levels, we want a larger threshold to prevent crowding
      const zoomLevel = viewport.zoom || 10;
      
      // Use a much larger threshold to ensure markers don't overlap
      // The van icons are approximately 40-50px wide
      const baseThreshold = 60; // Increased base threshold for icon size
      
      // Adjust threshold based on zoom level - more aggressive at lower zooms
      let overlapThreshold;
      if (zoomLevel < 12) {
        overlapThreshold = baseThreshold * 1.5; // Very aggressive at low zoom
      } else if (zoomLevel < 14) {
        overlapThreshold = baseThreshold * 1.2; // Moderately aggressive
      } else if (zoomLevel < 16) {
        overlapThreshold = baseThreshold; // Standard threshold
      } else {
        overlapThreshold = baseThreshold * 0.8; // Less aggressive at high zoom
      }
      
      // console.log(`Using overlap threshold: ${overlapThreshold}px at zoom ${zoomLevel.toFixed(1)}`);
      
      // Group markers by proximity (create clusters)
      const clusters: TradesPersonMarker[][] = [];
      
      // First, sort markers by priority so vans are processed before HQs
      // This ensures vans are more likely to be the visible marker in a cluster
      markers.sort((a, b) => b.priority - a.priority);
      
      // Process each marker
      for (const marker of markers) {
        // Skip if already processed
        if (visibilityMap[marker.id] === false) continue;
        
        // Convert to pixel coordinates
        const markerPoint = mapRef.current.project([marker.longitude, marker.latitude]);
        let foundCluster = false;
        
        // Check if this marker belongs to an existing cluster
        for (const cluster of clusters) {
          const clusterCenter = mapRef.current.project([
            cluster[0].longitude, 
            cluster[0].latitude
          ]);
          
          // Calculate distance to cluster center
          const distance = Math.sqrt(
            Math.pow(markerPoint.x - clusterCenter.x, 2) + 
            Math.pow(markerPoint.y - clusterCenter.y, 2)
          );
          
          // If close enough, add to this cluster and hide the marker
          if (distance < overlapThreshold) {
            // If this is a van and the first marker in the cluster is an HQ,
            // replace the HQ with the van as the visible marker
            if (marker.isVan && !cluster[0].isVan) {
              // Hide the current cluster leader (HQ)
              visibilityMap[cluster[0].id] = false;
              
              // Add the van to the beginning of the cluster
              cluster.unshift(marker);
              
              // Make the van visible
              visibilityMap[marker.id] = true;
              
              // console.log(`Van ${marker.companyName} replaced HQ as cluster leader`);
            } else {
              // Normal case - add to cluster and hide
              cluster.push(marker);
              visibilityMap[marker.id] = false;
            }
            
            foundCluster = true;
            break;
          }
        }
        
        // If not part of any cluster, create a new one
        if (!foundCluster) {
          clusters.push([marker]);
          // First marker in each cluster stays visible
          visibilityMap[marker.id] = true;
        }
      }
      
      // Ensure only one marker is visible per cluster
      clusters.forEach(cluster => {
        if (cluster.length > 1) {
          // First sort by priority (vans > HQ)
          // Then by company name for consistency
          cluster.sort((a, b) => {
            if (a.priority !== b.priority) {
              return b.priority - a.priority; // Higher priority first
            }
            return a.companyName.localeCompare(b.companyName);
          });
          
          // Make only the first marker visible
          for (let i = 0; i < cluster.length; i++) {
            visibilityMap[cluster[i].id] = (i === 0);
          }
          
          const markerType = cluster[0].isVan ? 'van' : 'HQ';
          // console.log(`Cluster with ${cluster.length} markers, showing: ${cluster[0].companyName} (${markerType})`);
        }
      });
      
      // Update state with visibility map
      setVisibleMarkers(visibilityMap);
      
      // Log stats
      const visibleCount = Object.values(visibilityMap).filter(v => v).length;
      // console.log(`MapView update: ${visibleCount}/${markers.length} markers visible at zoom ${zoomLevel.toFixed(1)}`);
      // console.log(`Created ${clusters.length} clusters from ${markers.length} markers`);
    } catch (error) {
      console.error('Error in marker clustering:', error);
    }
  }, [availableLocksmiths, viewport.zoom, roadSnappedPoints, viewport.latitude, viewport.longitude]);

  const handleMapError = (e: any) => {
    console.error('Map error:', e);
    setError(e.error?.message || 'Failed to load map');
  };

  const handleMapLoad = () => {
    // console.log('Map loaded successfully');
    setError(null);
    storeMapInstance();
  };

  if (!mapboxToken) {
    return (
      <div className="flex items-center justify-center h-full bg-gray-100">
        <div className="p-4 bg-red-100 border border-red-300 rounded-lg text-red-700 flex items-center gap-2 max-w-md">
          <AlertCircle className="h-5 w-5" />
          <span>Map configuration error: Missing access token</span>
        </div>
      </div>
    );
  }

  return (
    <>
      <Map
        ref={mapRef}
        style={{width: '100%', height: '100%'}}
        mapStyle="mapbox://styles/mapbox/streets-v12"
        mapboxAccessToken={mapboxToken}
        onError={handleMapError}
        onLoad={handleMapLoad}
        attributionControl={true}
        reuseMaps
        {...viewport}
        onMove={onMove}
      >
        {error && (
          <div className="absolute top-0 left-0 right-0 z-50">
            <div className="p-4 bg-red-100 border border-red-300 rounded-lg text-red-700 flex items-center gap-2 max-w-md mx-auto mt-4">
              <AlertCircle className="h-5 w-5" />
              <span>{error}</span>
            </div>
          </div>
        )}

        {/* Service Radius Circle has been removed as requested */}

        {/* Search Location Pin */}
        {hasSearched && searchLocation && (
          <Marker
            latitude={searchLocation.latitude}
            longitude={searchLocation.longitude}
            anchor="bottom"
          >
            <div className="animate-bounce">
              <MapPin className="h-8 w-8 text-blue-600 stroke-2" />
            </div>
          </Marker>
        )}
                {/* Locksmith/Tradesperson Markers */}
        {hasSearched && availableLocksmiths.map((locksmith) => {
          // console.log('Rendering locksmith:', {
            company: locksmith.companyName,
            locations: locksmith.locations.length
          });
          
          // Find current location and HQ location
          const currentLocation = locksmith.locations.find(loc => loc.isCurrentLocation);
          let hqLocation = locksmith.locations.find(loc => !loc.isCurrentLocation);
          
          // If no HQ location found but we have coordinates in the main locksmith data
          if (!hqLocation && locksmith.latitude && locksmith.longitude) {
            hqLocation = {
              latitude: locksmith.latitude,
              longitude: locksmith.longitude,
              isCurrentLocation: false
            };
          }
        
        // Check if we have a road-snapped point with bearing
        // Calculate bearing for van rotation (direction the tradesperson is facing)
        // Default to east-facing (90 degrees)
        let bearing = 90;
        const tradespersonId = locksmith.id;
        
        // Get bearing from road snapping if available
        const snappedPoint = roadSnappedPoints[`${locksmith.id}-current`];
        if (snappedPoint && typeof snappedPoint.bearing === 'number') {
          // Use the road bearing if available
          bearing = snappedPoint.bearing;
          // console.log(`Company: ${locksmith.companyName}, Road Bearing: ${bearing}°`);
        } else {
          // Fallback: Calculate bearing based on company name to get consistent but varied directions
          const companyNameHash = locksmith.companyName.split('').reduce(
            (acc, char) => acc + char.charCodeAt(0), 0
          );
          
          // Use the hash to generate a bearing between 0-359
          bearing = companyNameHash % 360;
          // console.log(`Company: ${locksmith.companyName}, Fallback Bearing: ${bearing}°`);
        }
        
        // Store current location for future movement tracking
        if (currentLocation) {
          previousLocations[tradespersonId] = {
            latitude: currentLocation.latitude,
            longitude: currentLocation.longitude
          };
        }
        
        // Check if van marker should be visible (prevent overlap)
        
      // Get bearing from road snapping if available
      const snappedPoint = roadSnappedPoints[`${locksmith.id}-current`];
      if (snappedPoint && typeof snappedPoint.bearing === 'number') {
        // Use the road bearing if available
        bearing = snappedPoint.bearing;
        // console.log(`Company: ${locksmith.companyName}, Road Bearing: ${bearing}°`);
      } else {
        // Fallback: Calculate bearing based on company name to get consistent but varied directions
        const companyNameHash = locksmith.companyName.split('').reduce(
          (acc, char) => acc + char.charCodeAt(0), 0
        );
          
        // Use the hash to generate a bearing between 0-359
        bearing = companyNameHash % 360;
        // console.log(`Company: ${locksmith.companyName}, Fallback Bearing: ${bearing}°`);
      }
        
      // Store current location for future movement tracking
      if (currentLocation) {
        previousLocations[tradespersonId] = {
          latitude: currentLocation.latitude,
          longitude: currentLocation.longitude
        };
      }
        
      // Check if van marker should be visible (prevent overlap)
      const isVanVisible = visibleMarkers[`${locksmith.id}-van`] !== false;
        
      // Check if HQ marker should be visible (prevent overlap)
      const isHQVisible = visibleMarkers[`${locksmith.id}-hq`] !== false;
        
      // DEBUG Ant - AntMad HQ locations
      if (locksmith.companyName.includes('Ant')) {
        console.log('🔍 DEBUG ANT:', { 
          companyName: locksmith.companyName, 
          hasCurrentLocation: !!currentLocation,
          hasHQLocation: !!hqLocation,
          willRender: !!(hqLocation && isHQVisible && !currentLocation),
          isHQVisible
        });
          
        // Force create an HQ location for Ant - AntMad with hardcoded coordinates
        if (locksmith.companyName === 'Ant - AntMad') {
          hqLocation = {
            latitude: 53.4032,
            longitude: -2.3231,
            isCurrentLocation: false
          };
          console.log('✅ Created hardcoded HQ location for Ant-AntMad:', hqLocation);
            
          // FORCE CURRENT LOCATION TO NULL FOR ANT-MAD
          // This is critical to make the HQ pin appear
          if (currentLocation) {
            console.log('⚠️ Forcing currentLocation to null for Ant-AntMad');
            currentLocation = null;
          }
        }
      }
        
      return (
        <div key={locksmith.id}>
          {/* Show van marker if it exists and is visible */}
          {/* Current location (van icon) */}
          {currentLocation && isVanVisible && (
            <Marker
              key={`${locksmith.id}-current`}
              latitude={roadSnappedPoints[`${locksmith.id}-current`]?.latitude || currentLocation.latitude}
              longitude={roadSnappedPoints[`${locksmith.id}-current`]?.longitude || currentLocation.longitude}
              anchor="center"
            >
              <div 
                className="cursor-pointer"
                onClick={() => onMarkerClick(locksmith)}
                title={`${locksmith.companyName} (Live Location)`}
              >
                {/* Create a completely new instance of the van for each tradesperson */}
                <div key={`van-container-${locksmith.id}-${Date.now()}`}>
                  <VanIcon3D 
                    className="h-10 w-10"
                    bearing={90} 
                    animate={true}
                  />
                </div>
              </div>
            </Marker>
            )}
              
            {/* HQ location (shop icon) - Only show if no live location is shared */}
            {/* CRITICAL: This conditional determines whether the HQ pin shows */}
            {hqLocation && isHQVisible && !currentLocation && (
            {currentLocation && isVanVisible && (
              <Marker
                key={`${locksmith.id}-current`}
                latitude={roadSnappedPoints[`${locksmith.id}-current`]?.latitude || currentLocation.latitude}
                longitude={roadSnappedPoints[`${locksmith.id}-current`]?.longitude || currentLocation.longitude}
                anchor="center"
              >
                <div 
                  className="cursor-pointer"
                  onClick={() => onMarkerClick(locksmith)}
                  title={`${locksmith.companyName} (Live Location)`}
                >
                  {/* Create a completely new instance of the van for each tradesperson */}
                  <div key={`van-container-${locksmith.id}-${Date.now()}`}>
                    <VanIcon3D 
                      className="h-10 w-10"
                      bearing={90} 
                      animate={true}
                    />
                  </div>
                </div>
              </Marker>
              )}
              
              {/* HQ location (shop icon) - Only show if no live location is shared */}
              {/* CRITICAL: This conditional determines whether the HQ pin shows */}
              {hqLocation && isHQVisible && !currentLocation && (
                <Marker
                  key={`${locksmith.id}-hq`}
                  latitude={hqLocation.latitude}
                  longitude={hqLocation.longitude}
                  anchor="bottom"
                >
                  <div 
                    className="cursor-pointer"
                    onClick={() => onMarkerClick(locksmith)}
                    title={`${locksmith.companyName} (Business Location)`}
                  >
                    <ShopIcon3D className="h-8 w-8 text-indigo-600" />
                    {/* Special highlight for Ant - AntMad during testing */}
                    {locksmith.companyName.includes('Ant') && (
                      <div className="absolute -top-8 -left-16 bg-yellow-300 text-xs p-1 rounded whitespace-nowrap">
                        {locksmith.companyName}
                      </div>
                    )}
                  </div>
                </Marker>
              )}
            </div>
          );
        })}
      </Map>
    </>
  )
}